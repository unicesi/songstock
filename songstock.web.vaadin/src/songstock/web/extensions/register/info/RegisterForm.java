/**
* Copyright © 2013 Universidad Icesi
* 
* This file is part of SongStock.
* 
* SongStock is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
* 
* SongStock is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with SongStock.  If not, see <http://www.gnu.org/licenses/>.
**/
package songstock.web.extensions.register.info;

import songstock.web.UIContributable;
import songstock.web.Registry;
import songstock.web.SongStockUI;
import songstock.web.client.MenuPanel;
import songstock.web.extensions.login.basic.BasicLoginFormController;
import users.dtos.IUser;
import users.dtos.impl.User;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.TextField;

/**
 * 
 * @author David Durán
 *
 */
public class RegisterForm extends CustomComponent implements UIContributable {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;

	@AutoGenerated
	private Button buttonLogin;

	@AutoGenerated
	private Button buttonClear;

	@AutoGenerated
	private Button buttonRegister;

	@AutoGenerated
	private Label labelError;

	@AutoGenerated
	private Label labelConfirmNewPassword;

	@AutoGenerated
	private Label labelConfirmPassword;

	@AutoGenerated
	private Label labelPassword;

	@AutoGenerated
	private Label labelEmail;

	@AutoGenerated
	private Label labelName;

	@AutoGenerated
	private Label labelTitle;

	@AutoGenerated
	private PasswordField passwordField3;

	@AutoGenerated
	private PasswordField passwordField2;

	@AutoGenerated
	private PasswordField passwordField1;

	@AutoGenerated
	private TextField textFieldEmail;

	@AutoGenerated
	private TextField textFieldName;

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public final static String REGISTER_FORM = "registerForm";
	public final static String ACTION_UPDATE = "Update";
	public final static String ACTION_REGISTER = "Register";

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public RegisterForm() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		this.labelError.setValue("");
		this.labelError.setEnabled(false);

		this.buttonRegister.addClickListener(new ClickListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				if (buttonRegister.getCaption().equals(ACTION_REGISTER))
					doRegister();
				if (buttonRegister.getCaption().equals(ACTION_UPDATE)) {
					doUpdate();
				}
			}
		});

		this.buttonClear.addClickListener(new ClickListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				clear();
			}
		});

		this.buttonLogin.addClickListener(new ClickListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				setActionRegister();
				MenuPanel menuPanel = Registry.get(SongStockUI.MENU_PANEL);
				try {
					if (buttonLogin.getCaption().equals("Logout"))
						BasicLoginFormController.getInstance().doLogout();
					menuPanel.setMenuCaption("User Info",
							RegisterForm.ACTION_REGISTER);
					menuPanel.disableMenus();
				} catch (Exception e) {
					menuPanel.setMenuCaption(RegisterForm.ACTION_REGISTER,
							"User Info");
				}
				BasicLoginFormController.getInstance().showLoginForm();
			}
		});
	}

	protected void doRegister() {
		IUser user = new User();
		String email = textFieldEmail.getValue();
		String password = passwordField1.getValue();
		String name = textFieldName.getValue();
		String password2 = passwordField2.getValue();
		if (!email.equals("") && !password.equals("") && !name.equals("")
				&& !password2.equals("")) {
			if (password.equals(password2)) {
				user.setEmail(email);
				user.setName(name);
				user.setPassword(password);
				RegisterFormController.getInstance().doRegister(user);
			} else {
				setErrorMessage("Passwords do not match");
			}
		} else {
			setErrorMessage("All the fields must be filled");
		}
	}

	protected void doUpdate() {
		IUser user = new User();
		String email = textFieldEmail.getValue();
		String old_password = passwordField1.getValue();
		String new_pass = passwordField2.getValue();
		String new_pass2 = passwordField3.getValue();
		String name = textFieldName.getValue();
		if (!email.equals("") && !old_password.equals("") && !name.equals("")
				&& !new_pass.equals("") && !new_pass2.equals("")) {
			user.setEmail(email);
			user.setName(name);
			user.setPassword(old_password);
			RegisterFormController.getInstance().doUpdate(user, new_pass,
					new_pass2);
		} else {
			setErrorMessage("All the fields must be filled");
		}
	}

	public void clear() {
		textFieldName.setValue("");
		passwordField1.setValue("");
		passwordField2.setValue("");
		passwordField3.setValue("");
	}

	public void setErrorMessage(String message) {
		Notification.show("SongStock", message, Type.TRAY_NOTIFICATION);
		this.labelError.setValue("<i>" + message + "</i>");
		// this.buttonRegister.setComponentError(new UserError(message,
		// ContentMode.TEXT, ErrorLevel.WARNING));
	}

	public void setActionUpdate() {
		buttonRegister.setCaption(ACTION_UPDATE);
		labelTitle.setValue("<b>" + ACTION_UPDATE + "</b>");
		labelPassword.setValue("Old Password:");
		labelConfirmPassword.setValue("New Password:");
		IUser userLogged = Registry.get(SongStockUI.USER);
		textFieldEmail.setValue(userLogged.getEmail());
		textFieldEmail.setEnabled(false);
		labelConfirmNewPassword.setVisible(true);
		passwordField3.setVisible(true);
		buttonLogin.setCaption("Logout");
	}

	public void setActionRegister() {
		buttonRegister.setCaption(ACTION_REGISTER);
		labelTitle.setValue("<b>" + ACTION_REGISTER + "</b>");
		labelPassword.setValue("Password:");
		labelConfirmPassword.setValue("Confirm Password:");
		labelError.setValue("");
		textFieldEmail.setValue("");
		textFieldEmail.setEnabled(true);
		labelConfirmNewPassword.setVisible(false);
		passwordField3.setVisible(false);
	}

	public void setLoginButtonText(String text) {
		buttonLogin.setCaption(text);
	}
	
	@Override
	public void addUIComponent(Component component, Object data) {
		mainLayout.addComponent(component, "top:40.0px;left:400.0px;");
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// textFieldName
		textFieldName = new TextField();
		textFieldName.setImmediate(false);
		textFieldName.setWidth("220px");
		textFieldName.setHeight("-1px");
		mainLayout.addComponent(textFieldName, "top:60.0px;left:160.0px;");
		
		// textFieldEmail
		textFieldEmail = new TextField();
		textFieldEmail.setImmediate(false);
		textFieldEmail.setWidth("220px");
		textFieldEmail.setHeight("-1px");
		mainLayout.addComponent(textFieldEmail, "top:102.0px;left:160.0px;");
		
		// passwordField1
		passwordField1 = new PasswordField();
		passwordField1.setImmediate(false);
		passwordField1.setWidth("220px");
		passwordField1.setHeight("-1px");
		mainLayout.addComponent(passwordField1, "top:142.0px;left:160.0px;");
		
		// passwordField2
		passwordField2 = new PasswordField();
		passwordField2.setImmediate(false);
		passwordField2.setWidth("220px");
		passwordField2.setHeight("-1px");
		mainLayout.addComponent(passwordField2, "top:182.0px;left:160.0px;");
		
		// passwordField3
		passwordField3 = new PasswordField();
		passwordField3.setImmediate(false);
		passwordField3.setVisible(false);
		passwordField3.setWidth("220px");
		passwordField3.setHeight("-1px");
		mainLayout.addComponent(passwordField3, "top:222.0px;left:160.0px;");
		
		// labelTitle
		labelTitle = new Label();
		labelTitle.setImmediate(false);
		labelTitle.setWidth("-1px");
		labelTitle.setHeight("-1px");
		labelTitle.setValue("<b>Register Form</b>");
		labelTitle.setContentMode(com.vaadin.shared.ui.label.ContentMode.HTML);
		mainLayout.addComponent(labelTitle, "top:20.0px;left:20.0px;");
		
		// labelName
		labelName = new Label();
		labelName.setImmediate(false);
		labelName.setWidth("-1px");
		labelName.setHeight("-1px");
		labelName.setValue("Name:");
		mainLayout.addComponent(labelName, "top:60.0px;left:20.0px;");
		
		// labelEmail
		labelEmail = new Label();
		labelEmail.setImmediate(false);
		labelEmail.setWidth("-1px");
		labelEmail.setHeight("-1px");
		labelEmail.setValue("Email:");
		mainLayout.addComponent(labelEmail, "top:100.0px;left:20.0px;");
		
		// labelPassword
		labelPassword = new Label();
		labelPassword.setImmediate(false);
		labelPassword.setWidth("-1px");
		labelPassword.setHeight("-1px");
		labelPassword.setValue("Password:");
		mainLayout.addComponent(labelPassword, "top:142.0px;left:20.0px;");
		
		// labelConfirmPassword
		labelConfirmPassword = new Label();
		labelConfirmPassword.setImmediate(false);
		labelConfirmPassword.setWidth("-1px");
		labelConfirmPassword.setHeight("-1px");
		labelConfirmPassword.setValue("Confirm Password:");
		mainLayout.addComponent(labelConfirmPassword,
				"top:182.0px;left:20.0px;");
		
		// labelConfirmNewPassword
		labelConfirmNewPassword = new Label();
		labelConfirmNewPassword.setImmediate(false);
		labelConfirmNewPassword.setVisible(false);
		labelConfirmNewPassword.setWidth("-1px");
		labelConfirmNewPassword.setHeight("-1px");
		labelConfirmNewPassword.setValue("Confirm New Password:");
		mainLayout.addComponent(labelConfirmNewPassword,
				"top:222.0px;left:20.0px;");
		
		// labelError
		labelError = new Label();
		labelError.setImmediate(false);
		labelError.setWidth("-1px");
		labelError.setHeight("-1px");
		labelError.setValue("<i>Label</i>");
		labelError.setContentMode(com.vaadin.shared.ui.label.ContentMode.HTML);
		mainLayout.addComponent(labelError, "top:300.0px;left:20.0px;");
		
		// buttonRegister
		buttonRegister = new Button();
		buttonRegister.setCaption(ACTION_REGISTER);
		buttonRegister.setImmediate(true);
		buttonRegister.setWidth("-1px");
		buttonRegister.setHeight("-1px");
		mainLayout.addComponent(buttonRegister, "top:260.0px;left:153.0px;");
		
		// buttonClear
		buttonClear = new Button();
		buttonClear.setCaption("Clear");
		buttonClear.setImmediate(true);
		buttonClear.setWidth("-1px");
		buttonClear.setHeight("-1px");
		mainLayout.addComponent(buttonClear, "top:260.0px;left:243.0px;");
		
		// buttonLogin
		buttonLogin = new Button();
		buttonLogin.setCaption("Login");
		buttonLogin.setImmediate(true);
		buttonLogin.setWidth("-1px");
		buttonLogin.setHeight("-1px");
		mainLayout.addComponent(buttonLogin, "top:260.0px;left:319.0px;");
		
		return mainLayout;
	}

}
