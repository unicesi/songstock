/**
* Copyright © 2013 Universidad Icesi
* 
* This file is part of SongStock.
* 
* SongStock is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
* 
* SongStock is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with SongStock.  If not, see <http://www.gnu.org/licenses/>.
**/
package songstock.web.extensions.register.addresses;

import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.Button.ClickEvent;

/**
 * 
 * @author Andrés Paz
 *
 */
public class AddressesListView extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Button buttonRemoveAddress;
	@AutoGenerated
	private Button buttonUpdateAddress;
	@AutoGenerated
	private Button buttonAddAddress;
	@AutoGenerated
	private Table tableAddresses;
	@AutoGenerated
	private Label labelTitle;
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public AddressesListView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// User code
		
		tableAddresses.addContainerProperty("Address", String.class, null);
		
		// Allow selecting items from the table.
		tableAddresses.setSelectable(true);
		
		// Send changes in selection immediately to server.
		tableAddresses.setImmediate(true);
		
		tableAddresses.addValueChangeListener(new ValueChangeListener() {
			
			private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				if (tableAddresses.getValue() != null) {
					buttonUpdateAddress.setEnabled(true);
					buttonRemoveAddress.setEnabled(true);
				} else {
					buttonUpdateAddress.setEnabled(false);
					buttonRemoveAddress.setEnabled(false);
				}
			}
		});
		
		buttonAddAddress.addClickListener(new ClickListener() {
			
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				addAddress();
			}
		});
		
		buttonUpdateAddress.setEnabled(false);
		buttonUpdateAddress.addClickListener(new ClickListener() {
			
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				updateAddress();
			}
		});
		
		buttonRemoveAddress.setEnabled(false);
		buttonRemoveAddress.addClickListener(new ClickListener() {
			
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				removeAddress();
			}
		});
	}

	protected void addAddress() {
		AddressesController.getInstance().showAddressForm(/*null*/);
	}

	protected void updateAddress() {
//		IAddress address = (IAddress) tableAddresses.getValue();
		AddressesController.getInstance().showAddressForm(/*address*/);
	}

	protected void removeAddress() {
//		IAddress address = (IAddress) tableAddresses.getValue();
//		tableAddresses.removeItem(address);
//		AddressesController.getInstance().doRemove(address);
	}
	
	public void loadAddresses(/*List<IAddress> addresses*/) {
//		tableAddresses.removeAllItems();
//		
//		if (addresses != null) {
//			for (IAddress address : addresses) {
//				tableAddresses.addItem(new Object[] { address.getAddress() }, address);
//			}
//		}
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// labelTitle
		labelTitle = new Label();
		labelTitle.setImmediate(false);
		labelTitle.setWidth("-1px");
		labelTitle.setHeight("-1px");
		labelTitle.setValue("<b>Addresses</b>");
		labelTitle.setContentMode(com.vaadin.shared.ui.label.ContentMode.HTML);
		mainLayout.addComponent(labelTitle, "top:20.0px;left:20.0px;");
		
		// tableAddresses
		tableAddresses = new Table();
		tableAddresses.setImmediate(false);
		tableAddresses.setWidth("100.0%");
		tableAddresses.setHeight("120px");
		mainLayout.addComponent(tableAddresses,
				"top:100.0px;right:20.0px;left:20.0px;");
		
		// buttonAddAddress
		buttonAddAddress = new Button();
		buttonAddAddress.setCaption("Add Address");
		buttonAddAddress.setImmediate(false);
		buttonAddAddress.setWidth("-1px");
		buttonAddAddress.setHeight("-1px");
		mainLayout.addComponent(buttonAddAddress, "top:60.0px;left:20.0px;");
		
		// buttonUpdateAddress
		buttonUpdateAddress = new Button();
		buttonUpdateAddress.setCaption("Update Address");
		buttonUpdateAddress.setImmediate(false);
		buttonUpdateAddress.setWidth("-1px");
		buttonUpdateAddress.setHeight("-1px");
		mainLayout
				.addComponent(buttonUpdateAddress, "top:60.0px;left:140.0px;");
		
		// buttonRemoveAddress
		buttonRemoveAddress = new Button();
		buttonRemoveAddress.setCaption("Remove Address");
		buttonRemoveAddress.setImmediate(false);
		buttonRemoveAddress.setWidth("-1px");
		buttonRemoveAddress.setHeight("-1px");
		mainLayout
				.addComponent(buttonRemoveAddress, "top:60.0px;left:280.0px;");
		
		return mainLayout;
	}

}
